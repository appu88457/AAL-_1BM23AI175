#include <stdio.h>
#include <stdlib.h>

// Structure to represent an edge
typedef struct {
    int src, dest, weight;
} Edge;

// Function to compare edges based on weight (for sorting)
int compare(const void *a, const void *b) {
    return ((Edge *)a)->weight - ((Edge *)b)->weight;
}

// Function to find the parent of a node
int find(int parent[], int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

// Function to unite two subsets
void unionSets(int parent[], int x, int y) {
    int rootX = find(parent, x);
    int rootY = find(parent, y);
    parent[rootX] = rootY;
}

int main() {
    int V, E,i=0;
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &V, &E);

    Edge edges[E];
    printf("Enter the edges (src dest weight):\n");
    for (i; i < E; i++) {
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);
    }

    // Sort edges by weight
    qsort(edges, E, sizeof(Edge), compare);

    int parent[V];
    for (i; i < V; i++)
        parent[i] = i;

    printf("\nEdges in the Minimum Spanning Tree:\n");
    int mstWeight = 0;
    int edgeCount = 0;

    for ( i; i < E && edgeCount < V - 1; i++) {
        int u = edges[i].src;
        int v = edges[i].dest;

        if (find(parent, u) != find(parent, v)) {
            unionSets(parent, u, v);
            printf("%d - %d : %d\n", u, v, edges[i].weight);
            mstWeight += edges[i].weight;
            edgeCount++;
        }
    }

    printf("Total weight of MST: %d\n", mstWeight);
    return 0;
