#include <stdio.h>
#include <stdlib.h>
#define MAX 100

typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

Node* adjList[MAX];  
int visited[MAX];
int stack[MAX];
int top = -1;

Node* createNode(int v) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

void addEdge(int u, int v) {
    Node* newNode = createNode(v);
    newNode->next = adjList[u];
    adjList[u] = newNode;
}

void dfs(int v) {
    visited[v] = 1;
    Node* temp = adjList[v];

    while (temp != NULL) {
        if (!visited[temp->vertex])
            dfs(temp->vertex);
        temp = temp->next;
    }

   
    stack[++top] = v;
}


void topologicalSort(int vertices) {
    for ( i = 0; i < vertices; i++)
        visited[i] = 0;
        int i;

    for ( i = 0; i < vertices; i++) {
        if (!visited[i])
            dfs(i);
    }

   
    printf("Topological Sort:\n");
    while (top >= 0)
        printf("%d ", stack[top--]);
    printf("\n");
}


int main() {
    int vertices = 6;
    int i;

  
    for ( i = 0; i < vertices; i++)
        adjList[i] = NULL;
        
    addEdge(5, 2);
    addEdge(5, 0);
    addEdge(4, 0);
    addEdge(4, 1);
    addEdge(2, 3);
    addEdge(3, 1);

    topologicalSort(vertices);

    return 0;
}
